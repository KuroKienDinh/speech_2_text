#ARG IMAGE_NAME
#FROM nvidia/cuda:12.5.1-base-ubuntu24.04 as base
#
#ENV NV_CUDA_LIB_VERSION 12.5.1-1
#
#FROM base as base-amd64
#
#ENV NV_NVTX_VERSION 12.5.82-1
#ENV NV_LIBNPP_VERSION 12.3.0.159-1
#ENV NV_LIBNPP_PACKAGE libnpp-12-5=${NV_LIBNPP_VERSION}
#ENV NV_LIBCUSPARSE_VERSION 12.5.1.3-1
#
#ENV NV_LIBCUBLAS_PACKAGE_NAME libcublas-12-5
#ENV NV_LIBCUBLAS_VERSION 12.5.3.2-1
#ENV NV_LIBCUBLAS_PACKAGE ${NV_LIBCUBLAS_PACKAGE_NAME}=${NV_LIBCUBLAS_VERSION}
#
#FROM base as base-arm64
#
#ENV NV_NVTX_VERSION 12.5.82-1
#ENV NV_LIBNPP_VERSION 12.3.0.159-1
#ENV NV_LIBNPP_PACKAGE libnpp-12-5=${NV_LIBNPP_VERSION}
#ENV NV_LIBCUSPARSE_VERSION 12.5.1.3-1
#
#ENV NV_LIBCUBLAS_PACKAGE_NAME libcublas-12-5
#ENV NV_LIBCUBLAS_VERSION 12.5.3.2-1
#ENV NV_LIBCUBLAS_PACKAGE ${NV_LIBCUBLAS_PACKAGE_NAME}=${NV_LIBCUBLAS_VERSION}
#
#FROM base-${TARGETARCH}
#
#ARG TARGETARCH
#
#LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"
#
#RUN apt-get update && apt-get install -y --no-install-recommends \
#    cuda-libraries-12-5=${NV_CUDA_LIB_VERSION} \
#    ${NV_LIBNPP_PACKAGE} \
#    cuda-nvtx-12-5=${NV_NVTX_VERSION} \
#    libcusparse-12-5=${NV_LIBCUSPARSE_VERSION} \
#    ${NV_LIBCUBLAS_PACKAGE} \
#    && rm -rf /var/lib/apt/lists/*
#
## Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
#RUN apt-mark hold ${NV_LIBCUBLAS_PACKAGE_NAME}

# Add entrypoint items
#COPY entrypoint.d/ /opt/nvidia/entrypoint.d/
#COPY nvidia_entrypoint.sh /opt/nvidia/
#ENV NVIDIA_PRODUCT_NAME="CUDA"
#ENTRYPOINT ["/opt/nvidia/nvidia_entrypoint.sh"]

FROM pytorch/pytorch:2.5.1-cuda12.1-cudnn9-runtime

RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3.12 \
        python3.12-dev \
        python3-pip \
        ffmpeg \
        libsndfile1 \
        build-essential \
        cmake \
        libgtk-3-dev \
        cargo \
        libboost-all-dev && \
    rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1

# Create and switch to a working directory
WORKDIR /app
ENV PYTHONPATH=/app
# Copy requirements.txt from the build context into the container
COPY ./api/requirements-gpu.txt .

# Install Python dependencies
RUN pip install --force-reinstall --ignore-installed --no-cache-dir --break-system-packages -r requirements-gpu.txt

# Copy the entire context into /app
COPY . /app
# Debug: List files to confirm structure
RUN find /app -type f
# Expose the port
EXPOSE 8008

# Run the FastAPI application via python -m
CMD [ "python3", "-m", "api.main" ]

